import { setType } from "../fable-core/Symbol";
import _Symbol from "../fable-core/Symbol";
import { comparePrimitives } from "../fable-core/Util";
import CurriedLambda from "../fable-core/CurriedLambda";
import { printf, toText } from "../fable-core/String";
import { controls as controls_1, Input, init as init_1 } from "./Filter";
import { ofArray } from "../fable-core/List";
import List from "../fable-core/List";
import { initAnimated, initColor, initRange } from "../FilterInputs/CombinedFilterInput";
import { achromatomaly, achromatopsia, tritanopia, deuteranopia, protanopia, tritanomaly, deuteranomaly, protanomaly, duoTone, colorTone, lsd, predator, night, vintage, browni, kodachrome, toBGR, polaroid, technicolor, threshold, tint, temperature, contrast, brightness, cool, warm, nightvision, sepia, grayscale, invert, luminanceToAlpha, hueRotate, saturate, rgba, normal } from "../src/Fable.Import.ReactNativeColorMatrixImageFilters";
export class Model {
  constructor(tag) {
    this.tag = tag | 0;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.CombinedFilter.Model",
      interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
      cases: [["Normal"], ["RGBA"], ["Saturate"], ["HueRotate"], ["LuminanceToAlpha"], ["Invert"], ["Grayscale"], ["Sepia"], ["Nightvision"], ["Warm"], ["Cool"], ["Brightness"], ["Contrast"], ["Temperature"], ["Tint"], ["Threshold"], ["Technicolor"], ["Polaroid"], ["ToBGR"], ["Kodachrome"], ["Browni"], ["Vintage"], ["Night"], ["Predator"], ["Lsd"], ["ColorTone"], ["DuoTone"], ["Protanomaly"], ["Deuteranomaly"], ["Tritanomaly"], ["Protanopia"], ["Deuteranopia"], ["Tritanopia"], ["Achromatopsia"], ["Achromatomaly"], ["AnimatedSaturate"], ["AnimatedHueRotate"], ["AnimatedBrightness"], ["AnimatedContrast"], ["AnimatedTemperature"], ["AnimatedTint"], ["AnimatedThreshold"], ["AnimatedNight"], ["AnimatedPredator"]]
    };
  }

  Equals(other) {
    return this.tag === other.tag;
  }

  CompareTo(other) {
    return comparePrimitives(this.tag, other.tag);
  }

}
setType("MatrixFilterConstructor.CombinedFilter.Model", Model);
export const name = CurriedLambda(toText(printf("%A")));
export function init(model) {
  switch (model.tag) {
    case 1:
      return init_1(ofArray([[new Input(5), function (name_1) {
        return initRange(0, 5, 1, name_1);
      }], [new Input(6), function (name_2) {
        return initRange(0, 5, 1, name_2);
      }], [new Input(7), function (name_3) {
        return initRange(0, 5, 1, name_3);
      }], [new Input(8), function (name_4) {
        return initRange(0, 5, 1, name_4);
      }]]));

    case 2:
      return init_1(ofArray([[new Input(0), function (name_5) {
        return initRange(-10, 10, 1, name_5);
      }]]));

    case 3:
      return init_1(ofArray([[new Input(0), function (name_6) {
        return initRange(-10, 10, 0, name_6);
      }]]));

    case 4:
      return init_1(new List());

    case 5:
      return init_1(new List());

    case 6:
      return init_1(ofArray([[new Input(0), function (name_7) {
        return initRange(0, 1, 1, name_7);
      }]]));

    case 7:
      return init_1(ofArray([[new Input(0), function (name_8) {
        return initRange(0, 1, 1, name_8);
      }]]));

    case 8:
      return init_1(new List());

    case 9:
      return init_1(new List());

    case 10:
      return init_1(new List());

    case 11:
      return init_1(ofArray([[new Input(0), function (name_9) {
        return initRange(-10, 10, 1, name_9);
      }]]));

    case 12:
      return init_1(ofArray([[new Input(0), function (name_10) {
        return initRange(-10, 10, 1, name_10);
      }]]));

    case 13:
      return init_1(ofArray([[new Input(0), function (name_11) {
        return initRange(-10, 10, 1, name_11);
      }]]));

    case 14:
      return init_1(ofArray([[new Input(0), function (name_12) {
        return initRange(-10, 10, 0, name_12);
      }]]));

    case 15:
      return init_1(ofArray([[new Input(0), function (name_13) {
        return initRange(-10, 10, 1, name_13);
      }]]));

    case 16:
      return init_1(new List());

    case 17:
      return init_1(new List());

    case 18:
      return init_1(new List());

    case 19:
      return init_1(new List());

    case 20:
      return init_1(new List());

    case 21:
      return init_1(new List());

    case 22:
      return init_1(ofArray([[new Input(0), function (name_14) {
        return initRange(-10, 10, 0.1, name_14);
      }]]));

    case 23:
      return init_1(ofArray([[new Input(0), function (name_15) {
        return initRange(-10, 10, 1, name_15);
      }]]));

    case 24:
      return init_1(new List());

    case 25:
      return init_1(ofArray([[new Input(1), function (name_16) {
        return initRange(-10, 10, 0.2, name_16);
      }], [new Input(2), function (name_17) {
        return initRange(-10, 10, 1.5, name_17);
      }], [new Input(3), function (name_18) {
        return initColor("#ffe580", name_18);
      }], [new Input(4), function (name_19) {
        return initColor("#338000", name_19);
      }]]));

    case 26:
      return init_1(ofArray([[new Input(9), function (name_20) {
        return initColor("#ffe580", name_20);
      }], [new Input(10), function (name_21) {
        return initColor("#338000", name_21);
      }]]));

    case 27:
      return init_1(new List());

    case 28:
      return init_1(new List());

    case 29:
      return init_1(new List());

    case 30:
      return init_1(new List());

    case 31:
      return init_1(new List());

    case 32:
      return init_1(new List());

    case 33:
      return init_1(new List());

    case 34:
      return init_1(new List());

    case 35:
      return init_1(ofArray([[new Input(0), function (name_22) {
        return initAnimated(-10, 10, 1, name_22);
      }]]));

    case 36:
      return init_1(ofArray([[new Input(0), function (name_23) {
        return initAnimated(-10, 10, 0, name_23);
      }]]));

    case 37:
      return init_1(ofArray([[new Input(0), function (name_24) {
        return initAnimated(-100, 100, 0, name_24);
      }]]));

    case 38:
      return init_1(ofArray([[new Input(0), function (name_25) {
        return initAnimated(-10, 10, 1, name_25);
      }]]));

    case 39:
      return init_1(ofArray([[new Input(0), function (name_26) {
        return initAnimated(-10, 10, 1, name_26);
      }]]));

    case 40:
      return init_1(ofArray([[new Input(0), function (name_27) {
        return initAnimated(-10, 10, 0, name_27);
      }]]));

    case 41:
      return init_1(ofArray([[new Input(0), function (name_28) {
        return initAnimated(-100, 100, 0, name_28);
      }]]));

    case 42:
      return init_1(ofArray([[new Input(0), function (name_29) {
        return initAnimated(-10, 10, 0.1, name_29);
      }]]));

    case 43:
      return init_1(ofArray([[new Input(0), function (name_30) {
        return initAnimated(-10, 10, 1, name_30);
      }]]));

    default:
      return init_1(new List());
  }
}
export function matrix(control, model) {
  const matchValue = [control, model];
  const $var1 = matchValue[0].tag === 1 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 5 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail != null ? matchValue[1].tail.head[0].tag === 6 ? matchValue[1].tail.head[1].tag === 0 ? matchValue[1].tail.tail.tail != null ? matchValue[1].tail.tail.head[0].tag === 7 ? matchValue[1].tail.tail.head[1].tag === 0 ? matchValue[1].tail.tail.tail.tail != null ? matchValue[1].tail.tail.tail.head[0].tag === 8 ? matchValue[1].tail.tail.tail.head[1].tag === 0 ? matchValue[1].tail.tail.tail.tail.tail == null ? [1, matchValue[1].tail.tail.tail.head[1].data, matchValue[1].tail.tail.head[1].data, matchValue[1].tail.head[1].data, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : matchValue[0].tag === 2 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [2, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 3 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [3, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 4 ? [4] : matchValue[0].tag === 5 ? [5] : matchValue[0].tag === 6 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [6, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 7 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [7, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 8 ? [8] : matchValue[0].tag === 9 ? [9] : matchValue[0].tag === 10 ? [10] : matchValue[0].tag === 11 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [11, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 12 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [12, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 13 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [13, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 14 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [14, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 15 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [15, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 16 ? [16] : matchValue[0].tag === 17 ? [17] : matchValue[0].tag === 18 ? [18] : matchValue[0].tag === 19 ? [19] : matchValue[0].tag === 20 ? [20] : matchValue[0].tag === 21 ? [21] : matchValue[0].tag === 22 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [22, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 23 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [23, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 24 ? [24] : matchValue[0].tag === 25 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 1 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail != null ? matchValue[1].tail.head[0].tag === 2 ? matchValue[1].tail.head[1].tag === 0 ? matchValue[1].tail.tail.tail != null ? matchValue[1].tail.tail.head[0].tag === 3 ? matchValue[1].tail.tail.head[1].tag === 1 ? matchValue[1].tail.tail.tail.tail != null ? matchValue[1].tail.tail.tail.head[0].tag === 4 ? matchValue[1].tail.tail.tail.head[1].tag === 1 ? matchValue[1].tail.tail.tail.tail.tail == null ? [25, matchValue[1].tail.tail.tail.head[1].data, matchValue[1].head[1].data, matchValue[1].tail.tail.head[1].data, matchValue[1].tail.head[1].data] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : matchValue[0].tag === 26 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 9 ? matchValue[1].head[1].tag === 1 ? matchValue[1].tail.tail != null ? matchValue[1].tail.head[0].tag === 10 ? matchValue[1].tail.head[1].tag === 1 ? matchValue[1].tail.tail.tail == null ? [26, matchValue[1].head[1].data, matchValue[1].tail.head[1].data] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : matchValue[0].tag === 27 ? [27] : matchValue[0].tag === 28 ? [28] : matchValue[0].tag === 29 ? [29] : matchValue[0].tag === 30 ? [30] : matchValue[0].tag === 31 ? [31] : matchValue[0].tag === 32 ? [32] : matchValue[0].tag === 33 ? [33] : matchValue[0].tag === 34 ? [34] : matchValue[0].tag === 35 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [35, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 36 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [36, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 37 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [37, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 38 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [38, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 39 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [39, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 40 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [40, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 41 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [41, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 42 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [42, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 43 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [43, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : [0];

  switch ($var1[0]) {
    case 0:
      return normal();

    case 1:
      return rgba($var1[4].Value, $var1[3].Value, $var1[2].Value, $var1[1].Value);

    case 2:
      return saturate($var1[1].Value);

    case 3:
      return hueRotate($var1[1].Value);

    case 4:
      return luminanceToAlpha();

    case 5:
      return invert();

    case 6:
      return grayscale($var1[1].Value);

    case 7:
      return sepia($var1[1].Value);

    case 8:
      return nightvision();

    case 9:
      return warm();

    case 10:
      return cool();

    case 11:
      return brightness($var1[1].Value);

    case 12:
      return contrast($var1[1].Value);

    case 13:
      return temperature($var1[1].Value);

    case 14:
      return tint($var1[1].Value);

    case 15:
      return threshold($var1[1].Value);

    case 16:
      return technicolor();

    case 17:
      return polaroid();

    case 18:
      return toBGR();

    case 19:
      return kodachrome();

    case 20:
      return browni();

    case 21:
      return vintage();

    case 22:
      return night($var1[1].Value);

    case 23:
      return predator($var1[1].Value);

    case 24:
      return lsd();

    case 25:
      return colorTone($var1[2].Value, $var1[4].Value, $var1[3].Value, $var1[1].Value);

    case 26:
      return duoTone($var1[1].Value, $var1[2].Value);

    case 27:
      return protanomaly();

    case 28:
      return deuteranomaly();

    case 29:
      return tritanomaly();

    case 30:
      return protanopia();

    case 31:
      return deuteranopia();

    case 32:
      return tritanopia();

    case 33:
      return achromatopsia();

    case 34:
      return achromatomaly();

    case 35:
      return saturate($var1[1].Animated.Value);

    case 36:
      return hueRotate($var1[1].Animated.Value);

    case 37:
      return brightness($var1[1].Animated.Value);

    case 38:
      return contrast($var1[1].Animated.Value);

    case 39:
      return temperature($var1[1].Animated.Value);

    case 40:
      return tint($var1[1].Animated.Value);

    case 41:
      return threshold($var1[1].Animated.Value);

    case 42:
      return night($var1[1].Animated.Value);

    case 43:
      return predator($var1[1].Animated.Value);

    case 44:
      return normal();
  }
}
export function controls(model) {
  var name_1;
  return CurriedLambda((name_1 = name(model), function (model_1, dispatch) {
    return controls_1(name_1, model_1, dispatch);
  }));
}
export const availableFilters = [new Model(0), new Model(1), new Model(2), new Model(3), new Model(4), new Model(5), new Model(6), new Model(7), new Model(8), new Model(9), new Model(10), new Model(11), new Model(12), new Model(13), new Model(14), new Model(15), new Model(16), new Model(17), new Model(18), new Model(19), new Model(20), new Model(21), new Model(22), new Model(23), new Model(24), new Model(25), new Model(26), new Model(27), new Model(28), new Model(29), new Model(30), new Model(31), new Model(32), new Model(33), new Model(34)];
export const availableAnimatedFilters = [new Model(35), new Model(36), new Model(37), new Model(38), new Model(39), new Model(40), new Model(41), new Model(42), new Model(43)];